use pon::*;
use std::collections::HashMap;

#[pub]
body -> Pon
  = sep* n:node sep* { n }

node -> Pon
  = float / integer / string / object / array / nil / transform / dependency_reference / reference

transform -> Pon
  = type_name:identifier sep* data:node sep* {
    Pon::TypedPon(Box::new(TypedPon {
      type_name: type_name.to_string(),
      data: data
    }))
  }

dependency_reference -> Pon
  = "@" entity_path:entity_path sep* "." sep* property_name:identifier {
    Pon::DependencyReference(NamedPropRef {
      entity_path: entity_path,
      property_key: property_name.to_string(),
    })
  }

reference -> Pon
  = "" entity_path:entity_path sep* "." sep* property_name:identifier {
    Pon::Reference(NamedPropRef {
      entity_path: entity_path,
      property_key: property_name.to_string(),
    })
  }

entity_path_root -> EntityPath
  = "this" sep* { EntityPath::This }
  / "parent" sep* { EntityPath::Parent }
  / name:identifier sep* { EntityPath::Named(name) }

entity_path -> EntityPath
  = path:entity_path_root sep* search:(":" sep* name:identifier { name })? {
    match search {
      Some(name) => EntityPath::Search(Box::new(path), name),
      None => path
    }
  }

array -> Pon
  = "[" sep* nodes:array_item ** "," sep* "]" {
    Pon::Array(nodes)
  }

array_item -> Pon
  = sep* v:node sep* { v }

object -> Pon
  = "{" sep* kvs:keyval ** "," sep* "}" {
    let mut rv = HashMap::new();
    for &(ref k, ref v) in kvs.iter() {
      rv.insert(k.clone(), v.clone());
    };
    Pon::Object(rv)
  }

keyval -> (String, Pon)
  = sep* k:identifier sep* ":" sep* v:node sep* { (k, v) }

identifier -> String
  = [a-zA-Z_][a-zA-Z_0-9]* { match_str.to_string() }

float -> Pon
  = [-]?[0-9]+[.][0-9]+ { Pon::Float(match_str.parse().unwrap()) }

nil -> Pon
  = "(" sep* ")" { Pon::Nil }

integer -> Pon
  = [-]?[0-9]+ { Pon::Integer(match_str.parse().unwrap()) }

string -> Pon
  = "'" s:string_inner "'" { Pon::String(s) }

string_inner -> String
  = [^']* { match_str.to_string() }

sep = [ \t\r\n]
